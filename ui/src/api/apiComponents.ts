/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";
import type { ClientErrorStatus, ServerErrorStatus } from "./apiUtils";

export type PostUserRegisterError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 400>;
  payload: Schemas.ErrorOUT;
}>;

export type PostUserRegisterVariables = {
  body: Schemas.RegisterIN;
} & ApiContext["fetcherOptions"];

export const fetchPostUserRegister = (
  variables: PostUserRegisterVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.RegisterOUT,
    PostUserRegisterError,
    Schemas.RegisterIN,
    {},
    {},
    {}
  >({ url: "/user/register", method: "post", ...variables, signal });

export const usePostUserRegister = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RegisterOUT,
      PostUserRegisterError,
      PostUserRegisterVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RegisterOUT,
    PostUserRegisterError,
    PostUserRegisterVariables
  >({
    mutationFn: (variables: PostUserRegisterVariables) =>
      fetchPostUserRegister({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PostUserLoginError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 400>;
  payload: Schemas.ErrorOUT;
}>;

export type PostUserLoginVariables = {
  body: Schemas.LoginIN;
} & ApiContext["fetcherOptions"];

export const fetchPostUserLogin = (
  variables: PostUserLoginVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.LoginOUT, PostUserLoginError, Schemas.LoginIN, {}, {}, {}>({
    url: "/user/login",
    method: "post",
    ...variables,
    signal,
  });

export const usePostUserLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginOUT,
      PostUserLoginError,
      PostUserLoginVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.LoginOUT,
    PostUserLoginError,
    PostUserLoginVariables
  >({
    mutationFn: (variables: PostUserLoginVariables) =>
      fetchPostUserLogin({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PostUserLogoutError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 400>;
  payload: Schemas.ErrorOUT;
}>;

export type PostUserLogoutVariables = {
  body: Schemas.LogoutIN;
} & ApiContext["fetcherOptions"];

export const fetchPostUserLogout = (
  variables: PostUserLogoutVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.LogoutOUT,
    PostUserLogoutError,
    Schemas.LogoutIN,
    {},
    {},
    {}
  >({ url: "/user/logout", method: "post", ...variables, signal });

export const usePostUserLogout = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LogoutOUT,
      PostUserLogoutError,
      PostUserLogoutVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.LogoutOUT,
    PostUserLogoutError,
    PostUserLogoutVariables
  >({
    mutationFn: (variables: PostUserLogoutVariables) =>
      fetchPostUserLogout({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PostUserChangepasswordError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 400>;
  payload: Schemas.ErrorOUT;
}>;

export type PostUserChangepasswordVariables = {
  body: Schemas.ChangePasswordIN;
} & ApiContext["fetcherOptions"];

export const fetchPostUserChangepassword = (
  variables: PostUserChangepasswordVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ChangePasswordOUT,
    PostUserChangepasswordError,
    Schemas.ChangePasswordIN,
    {},
    {},
    {}
  >({ url: "/user/changepassword", method: "post", ...variables, signal });

export const usePostUserChangepassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ChangePasswordOUT,
      PostUserChangepasswordError,
      PostUserChangepasswordVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ChangePasswordOUT,
    PostUserChangepasswordError,
    PostUserChangepasswordVariables
  >({
    mutationFn: (variables: PostUserChangepasswordVariables) =>
      fetchPostUserChangepassword({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetUserError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>;
  payload: Schemas.ErrorOUT;
}>;

export type GetUserVariables = ApiContext["fetcherOptions"];

export const fetchGetUser = (
  variables: GetUserVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.GetUserOUT, GetUserError, undefined, {}, {}, {}>({
    url: "/user",
    method: "get",
    ...variables,
    signal,
  });

export const useGetUser = <TData = Schemas.GetUserOUT,>(
  variables: GetUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GetUserOUT, GetUserError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.GetUserOUT, GetUserError, TData>({
    queryKey: queryKeyFn({ path: "/user", operationId: "getUser", variables }),
    queryFn: ({ signal }) =>
      fetchGetUser({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type PostUserError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 400>;
  payload: Schemas.ErrorOUT;
}>;

export type PostUserVariables = {
  body: Schemas.UpdateUserIN;
} & ApiContext["fetcherOptions"];

export const fetchPostUser = (
  variables: PostUserVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UpdateUserOUT,
    PostUserError,
    Schemas.UpdateUserIN,
    {},
    {},
    {}
  >({ url: "/user", method: "post", ...variables, signal });

export const usePostUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UpdateUserOUT,
      PostUserError,
      PostUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UpdateUserOUT,
    PostUserError,
    PostUserVariables
  >({
    mutationFn: (variables: PostUserVariables) =>
      fetchPostUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PostPasswordresetResetError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 400>;
  payload: Schemas.ErrorOUT;
}>;

export type PostPasswordresetResetVariables = {
  body: Schemas.PasswordResetIN;
} & ApiContext["fetcherOptions"];

export const fetchPostPasswordresetReset = (
  variables: PostPasswordresetResetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PasswordResetOUT,
    PostPasswordresetResetError,
    Schemas.PasswordResetIN,
    {},
    {},
    {}
  >({ url: "/passwordreset/reset", method: "post", ...variables, signal });

export const usePostPasswordresetReset = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PasswordResetOUT,
      PostPasswordresetResetError,
      PostPasswordresetResetVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PasswordResetOUT,
    PostPasswordresetResetError,
    PostPasswordresetResetVariables
  >({
    mutationFn: (variables: PostPasswordresetResetVariables) =>
      fetchPostPasswordresetReset({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PostPasswordresetForgotError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200 | 400>;
  payload: Schemas.ErrorOUT;
}>;

export type PostPasswordresetForgotVariables = {
  body: Schemas.ForgotPasswordIN;
} & ApiContext["fetcherOptions"];

export const fetchPostPasswordresetForgot = (
  variables: PostPasswordresetForgotVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ForgotPasswordOUT,
    PostPasswordresetForgotError,
    Schemas.ForgotPasswordIN,
    {},
    {},
    {}
  >({ url: "/passwordreset/forgot", method: "post", ...variables, signal });

export const usePostPasswordresetForgot = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ForgotPasswordOUT,
      PostPasswordresetForgotError,
      PostPasswordresetForgotVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.ForgotPasswordOUT,
    PostPasswordresetForgotError,
    PostPasswordresetForgotVariables
  >({
    mutationFn: (variables: PostPasswordresetForgotVariables) =>
      fetchPostPasswordresetForgot({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetAdminVersionError = Fetcher.ErrorWrapper<{
  status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>;
  payload: Schemas.ErrorOUT;
}>;

export type GetAdminVersionVariables = ApiContext["fetcherOptions"];

export const fetchGetAdminVersion = (
  variables: GetAdminVersionVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.VersionOUT, GetAdminVersionError, undefined, {}, {}, {}>({
    url: "/admin/version",
    method: "get",
    ...variables,
    signal,
  });

export const useGetAdminVersion = <TData = Schemas.VersionOUT,>(
  variables: GetAdminVersionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VersionOUT, GetAdminVersionError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.VersionOUT, GetAdminVersionError, TData>({
    queryKey: queryKeyFn({
      path: "/admin/version",
      operationId: "getAdminVersion",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAdminVersion({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/user";
      operationId: "getUser";
      variables: GetUserVariables;
    }
  | {
      path: "/admin/version";
      operationId: "getAdminVersion";
      variables: GetAdminVersionVariables;
    };
